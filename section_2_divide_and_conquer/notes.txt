__________________________________________________
Linear Search
__________________________________________________
problem solving pattern , dividing and conquering 

we are going to focus on searching algorithm,

let's talk about righting a simple searching algorithm 

if we had a 10k item array and we want to find if the number 39 is in there 

we could use indexOf 
it loops through the array looking for 39, returns the index 
if it doesnt find it , it returns -1 

function linearSearch(arr,target){
    for(let i =0;i< arr.length; i++){
        if(arr[i] === target) return i
    }
    return -1; 
}

in order to get to -1, every element had to be compared and searched, so if we had a million items in the array thats a million items 

it is an O(n) algorithm then 

we are concerned with worst case so we have to think about the max length of the array 

__________________________________________________
Binary Search
__________________________________________________

we saw linear search and it is the best possible search with unsorted data, if we had absolutely no idea how to array is ordered then we are going to potentially have to check every element 

however if we have a sorted array then we can look for values much more quickly 

we can look at the middle value in the array, if it is congrats 
if not then is it too large or too small and then we cut off the remaining values or the previous values 

So we need to write our own binary search method 

__________________________________________________
Implementing Binary Search
__________________________________________________

So i tried righting one of these functions but it looks like i took an incorrect approach that would have probably required recursion which i wasnt able to do effectively. 

Colt walked us through a solution and it was kind of tricky because you have to shift what you know to be the left and the right index where as I was trying to slice the arr to search only the portions I had not yet ruled out but that wouldve required me to also keep track off all of the indices that I was eliminating with a slice. Colt has a better way of doing it 

// function binarySearch(orderedArr, target) {
//     let halfIndex = Math.floor(orderedArr.length / 2)
//     if (orderedArr[halfIndex] === target) {
//         return halfIndex
//     } else if (orderedArr[halfIndex] < target) {
//         orderedArr = orderedArr.slice(halfIndex)
//         halfIndex = Math.floor(orderedArr.length / 2)
//         // console.log(orderedArr)
//         // console.log(halfIndex)
//         // return 'bigger than half'
//         binarySearch(orderedArr, target)
//     } else {
//         orderedArr = orderedArr.slice(1, halfIndex)
//         halfIndex = Math.floor(orderedArr.length / 2)
//         binarySearch(orderedArr, target)
//     }
// }

// let orderedArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]

function binarySearch(arr, val) {
    // getting the middle index, we subtract arr.length by 1 because thats the greatest possible index
    // const middleIdx = Math.floor((arr.length - 1) / 2)
    // console.log(middleIdx)
    // if (arr[middleIdx] === val) { return middleIdx } else if(arr[middleIdx]>val){

    // }else{

    // }
    // instead of all of that logic we are going to define a left and right index
    let leftIdx = 0;
    let rightIdx = arr.length - 1;
    while (leftIdx <= rightIdx) {
        // instead of hardcoding the array length we are getting the average of the left and the right to find the middle index
        let middleIdx = Math.floor((leftIdx + rightIdx) / 2);
        let middleVal = arr[middleIdx]
        if (middleVal < val) {
            leftIdx = middleIdx + 1
        } else if (middleVal > val) {
            rightIdx = middleIdx - 1
        } else {
            return middleIdx
        }
    }
    // if we break out of that loop and we didnt find it
    return -1
}
[3, 4, 6, 9, 10, 12, 15, 22, 30, 31]

__________________________________________________
Binary Search big o 
__________________________________________________
how does it perform?

there is a table comparing linear vs binary search 

but remember that binary search can only work on sorted arrays 

binary searches if we had to chart it are a lot smaller than what a linear search would do in terms of comparisons 

Time complexity is Big O(log n)

remember that 

A base-2 log (roughly) measures the number of times you can cut a value in half before the value is less than 1

we can see that the O(log n) is a lot faster and a lot flatter than o(n) but its not always possible. remember we could only do this because of the sorted set of data 

__________________________________________________
Divide and conquer wrap up
__________________________________________________

the general pattern 

Given some data , dive and conquer algorithm removes a large fraction of the data set from consideration at each step

typically the data must have some additional structure akak sorted 

Signficantly improves time complexity 

divide and conquer algorithms are around us and can be used to solve complex problems 

donald knuth talked about sorting mail , into areas based by geography, then down to smaller sub regions so on and so forth related to something called a radix sort 

things to be aware of:
1. make sure the data is properly structured 
2. if you can think of a linear solution quicklym can you use a divide and conquer approach to improve the complexity?
3. Watch out for off by one errors,
managing the left and right pointers can be tricky 

